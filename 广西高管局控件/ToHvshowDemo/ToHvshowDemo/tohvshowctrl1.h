#pragma once

// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

/////////////////////////////////////////////////////////////////////////////
// CTohvshowctrl1 wrapper class

class CTohvshowctrl1 : public CWnd
{
protected:
	DECLARE_DYNCREATE(CTohvshowctrl1)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0xB38E8E73, 0x1451, 0x470F, { 0x8E, 0xF, 0xE7, 0x1B, 0x9A, 0xFB, 0x3F, 0x53 } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName, LPCTSTR lpszWindowName, DWORD dwStyle,
						const RECT& rect, CWnd* pParentWnd, UINT nID, 
						CCreateContext* pContext = NULL)
	{ 
		return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); 
	}

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle, const RECT& rect, CWnd* pParentWnd, 
				UINT nID, CFile* pPersist = NULL, BOOL bStorage = FALSE,
				BSTR bstrLicKey = NULL)
	{ 
		return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); 
	}

// Attributes
public:


// Operations
public:

// _DToHvShow

// Functions
//

	void ConnectTo(LPCTSTR strAddr)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xa, DISPATCH_METHOD, VT_EMPTY, NULL, parms, strAddr);
	}
	long GetStatus()
	{
		long result;
		InvokeHelper(0xb, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	void Disconnect()
	{
		InvokeHelper(0xc, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void SetImgSavePath(LPCTSTR strPath)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xd, DISPATCH_METHOD, VT_EMPTY, NULL, parms, strPath);
	}
	CString GetPlate()
	{
		CString result;
		InvokeHelper(0xe, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	CString GetPlateColor()
	{
		CString result;
		InvokeHelper(0xf, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	CString GetPlateInfo()
	{
		CString result;
		InvokeHelper(0x10, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	long SaveSnapImage(LPCTSTR strFileName)
	{
		long result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x11, DISPATCH_METHOD, VT_I4, (void*)&result, parms, strFileName);
		return result;
	}
	long SaveSnapImage2(LPCTSTR strFileName)
	{
		long result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x12, DISPATCH_METHOD, VT_I4, (void*)&result, parms, strFileName);
		return result;
	}
	long SavePlateImage(LPCTSTR strFileName)
	{
		long result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x13, DISPATCH_METHOD, VT_I4, (void*)&result, parms, strFileName);
		return result;
	}
	long SavePlateBinImage(LPCTSTR strFileName)
	{
		long result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x14, DISPATCH_METHOD, VT_I4, (void*)&result, parms, strFileName);
		return result;
	}
	long SavePlateBin2BMP(LPCTSTR strFileName)
	{
		long result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x15, DISPATCH_METHOD, VT_I4, (void*)&result, parms, strFileName);
		return result;
	}
	CString GetImageRecTime(long lImgType)
	{
		CString result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x16, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, lImgType);
		return result;
	}
	CString GetImageFileName(long lImgType)
	{
		CString result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x17, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, lImgType);
		return result;
	}
	CString GetImageDataFromMem(long lImgType, VARIANT * pVarImg, long * lImgSize)
	{
		CString result;
		static BYTE parms[] = VTS_I4 VTS_PVARIANT VTS_PI4 ;
		InvokeHelper(0x18, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, lImgType, pVarImg, lImgSize);
		return result;
	}

// Properties
//

long GetRecvSnapImageFlag()
{
	long result;
	GetProperty(0x1, VT_I4, (void*)&result);
	return result;
}
void SetRecvSnapImageFlag(long propVal)
{
	SetProperty(0x1, VT_I4, propVal);
}
long GetRecvPlateImageFlag()
{
	long result;
	GetProperty(0x2, VT_I4, (void*)&result);
	return result;
}
void SetRecvPlateImageFlag(long propVal)
{
	SetProperty(0x2, VT_I4, propVal);
}
long GetRecvPlateBinImageFlag()
{
	long result;
	GetProperty(0x3, VT_I4, (void*)&result);
	return result;
}
void SetRecvPlateBinImageFlag(long propVal)
{
	SetProperty(0x3, VT_I4, propVal);
}
long GetRecvSnapDriverImageFlag()
{
	long result;
	GetProperty(0x4, VT_I4, (void*)&result);
	return result;
}
void SetRecvSnapDriverImageFlag(long propVal)
{
	SetProperty(0x4, VT_I4, propVal);
}
BOOL GetAutoSaveFlag()
{
	BOOL result;
	GetProperty(0x5, VT_BOOL, (void*)&result);
	return result;
}
void SetAutoSaveFlag(BOOL propVal)
{
	SetProperty(0x5, VT_BOOL, propVal);
}
CString GetShowPlateImage()
{
	CString result;
	GetProperty(0x6, VT_BSTR, (void*)&result);
	return result;
}
void SetShowPlateImage(CString propVal)
{
	SetProperty(0x6, VT_BSTR, propVal);
}
CString GetShowFirstImage()
{
	CString result;
	GetProperty(0x7, VT_BSTR, (void*)&result);
	return result;
}
void SetShowFirstImage(CString propVal)
{
	SetProperty(0x7, VT_BSTR, propVal);
}
CString GetShowSecondImage()
{
	CString result;
	GetProperty(0x8, VT_BSTR, (void*)&result);
	return result;
}
void SetShowSecondImage(CString propVal)
{
	SetProperty(0x8, VT_BSTR, propVal);
}
CString GetShowPlateResult()
{
	CString result;
	GetProperty(0x9, VT_BSTR, (void*)&result);
	return result;
}
void SetShowPlateResult(CString propVal)
{
	SetProperty(0x9, VT_BSTR, propVal);
}
long GetLogFile()
{
	long result;
	GetProperty(0x19, VT_I4, (void*)&result);
	return result;
}
void SetLogFile(long propVal)
{
	SetProperty(0x19, VT_I4, propVal);
}


};
